            == MCI: Managed Compiler Infrastructure ==

                -- Installation --

        ++ POSIX ++

Installation on POSIX systems works through the Waf build system. You
can obtain Waf from: http://code.google.com/p/waf

Once installed, you must configure the project like so:

    $ waf configure

You can use the --prefix option to specify where to install to. This
defaults to "/usr/local" normally. The --check-d-compiler switch can be
used to specify which compiler to build with. This will typically be
"dmd", "gdc", or "ldc2".

The MCI Waf script also supports some additional options:

    * --lp64 (= "true")
      - Whether to build for 64-bit pointers.
    * --mode (= "debug")
      - Which mode to build in. Building in "debug" disables any and
        all optimizations, while "release" enables optimization and
        inlining. Note that both modes will generate debug information
        and emit array bounds checks.
    * --vim (= <none>)
      - Where to install Vim syntax files for IAL files. If you wish
        to enable this, you should probably set this value to "~/.vim"
        or similar.
    * --gtksourceview (= <none>)
      - Where to install GtkSourceView syntax files for IAL files. If
        you wish to enable this, you should probably set this value to
        "~/.local/share/gtksourceview-3.0/language-specs" or similar.
    * --valgrind (= "false")
      - Whether to run the unit test suite with Valgrind. Note that
        this is disabled on OS X regardless of this setting.

You will need to have libffi, libgc and libdl installed for the build
to succeed. Your libffi installation must support the closure API. Your
libgc installation must support the typed GC API.

For example, to build for a 32-bit CPU, do:

    $ waf configure --lp64=false

Or to include Vim syntax files:

    $ waf configure --vim=~/.vim

You will likely want to build a release version if you're not a
contributor to the project, so:

    $ waf configure --mode=release

With the project configured, you can execute a build by doing:

    $ waf build

To install the project:

    $ waf install

Should you wish to uninstall the installed files at a later point,
simply execute:

    $ waf uninstall

You can optionally build the documentation, which includes a guide
to the compiler infrastructure and a framework reference:

    $ waf docs

The documentation will be placed in 'docs/_build'. You'll probably
be interested in 'docs/_build/html/index.html' primarily.

API documentation can be generated from the MCI sources by running:

    $ waf ddoc

This documentation will end up in 'docs/_ddoc', and you can access
it via 'docs/_ddoc/index.html'.

Finally, you can run the test suite to ensure everything is working
as it should:

    $ waf unittest
    $ waf test

        ++ Windows ++

Building on Windows is only supported via Visual D. Install your
compiler of choice and configure Visual D to use it.

You'll need the libffi library files. You can either build libffi
from source under Cygwin or MinGW, or you can download precompiled
binaries here: http://github.com/lycus/libffi-d/downloads

You need to make sure that either the Cygwin or MinGW version of the
library can be found via your library search paths. These can be set
in the global Visual D options.

Finally, select your desired solution configuration (Debug or Release)
and build the solution.

Note that the MCI cannot currently be compiled for 64-bit on Windows
with DMD, due to limitations in Optlink (among other things). It is
not a limitation in the MCI itself.
